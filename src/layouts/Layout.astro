---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
			integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
			crossorigin="anonymous"
		/>
		<link
			href="https://cdn.jsdelivr.net/npm/remixicon@3.2.0/fonts/remixicon.css"
			rel="stylesheet"
		/>
		<link rel="stylesheet" href="./style.css" />
		<link
			rel="stylesheet"
			href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
		/>
		<script
			src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
		></script>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>San Juan De Dios</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>
	@import url("https://fonts.googleapis.com/css2?family=Gentium+Book+Plus:wght@400;700&family=IM+Fell+French+Canon&family=Labrada&family=Montserrat:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=PT+Serif:ital,wght@0,400;0,700;1,400;1,700&display=swap");
	@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");

	@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap");
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		scroll-behavior: smooth;
		font-family: "Roboto", sans-serif;
	}

	body {
		background-size: cover;
		background-position: center;
		overflow-x: hidden;
		background-color: #fefeff;
	}
</style>

<script>
	const stats = document.querySelector(".stats");
	const counters = document.querySelectorAll(".counter");
	let bol = false;

	const sectionOffset = stats.offsetTop + stats.offsetHeight;

	function animateCounters() {
		const targets = [];
		counters.forEach((counter) => {
			targets.push(+counter.getAttribute("data-target"));
		});
		const maxTarget = Math.max(...targets);
		let currentCount = 0;

		function updateCount() {
			counters.forEach((counter, index) => {
				const target = targets[index];
				const speed = +counter.getAttribute("data-speed");
				if (currentCount < target) {
					counter.innerText = Math.floor(
						currentCount * (target / maxTarget),
					);
				} else {
					counter.innerText = target;
				}
			});
			currentCount++;
			if (currentCount <= maxTarget) {
				requestAnimationFrame(updateCount);
			} else {
				bol = true;
			}
		}

		updateCount();
	}

	window.addEventListener("scroll", () => {
		const pageOffset = window.innerHeight + pageYOffset;
		if (pageOffset > sectionOffset && bol === false) {
			animateCounters();
		}
	});
</script>
